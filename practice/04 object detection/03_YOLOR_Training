{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"03_YOLOR_Training","provenance":[{"file_id":"1Thmsug5CaLWpuVlJEcVNM1YpUO6b0pbD","timestamp":1658936801143},{"file_id":"1e1Uk9SjxBaagu7aoGZ4oTcqePhnMLM23","timestamp":1626109510035}],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"icONSOTY9AmP"},"source":["# **Object Detection with Custom Dataset using YOLOR**"]},{"cell_type":"markdown","source":["## **1. Install YOLOR**"],"metadata":{"id":"4qItcPXZk2_Y"}},{"cell_type":"code","metadata":{"id":"eMMbGmleDp0Z"},"source":["# GPU 할당 체크\n","!nvidia-smi"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gNLzSHR9GeiD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658997240887,"user_tz":-540,"elapsed":17742,"user":{"displayName":"Hyungmin Jun","userId":"09878601996915185956"}},"outputId":"ca9d140a-a4d8-4be2-b022-1cb2eb3bd225"},"source":["# 구글 드라이브 연결\n","from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["# 작업장소 생성 및 이동\n","!rm -rf /content/drive/MyDrive/yolor\n","!mkdir /content/drive/MyDrive/yolor\n","%cd /content/drive/MyDrive/yolor"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zYRpeVPk8JIJ","executionInfo":{"status":"ok","timestamp":1658997264330,"user_tz":-540,"elapsed":12946,"user":{"displayName":"Hyungmin Jun","userId":"09878601996915185956"}},"outputId":"7f2827d2-98bc-4641-bffc-7e87614f4105"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/yolor\n"]}]},{"cell_type":"code","metadata":{"id":"rLikqSV3Djlv"},"source":["# Install YOLOR from GitHub\n","!git clone https://github.com/WongKinYiu/yolor\n","%cd yolor\n","\n","# Install YOLOR\n","!pip install -qr requirements.txt\n","\n","# Install Mish CUDA\n","!git clone https://github.com/JunnYu/mish-cuda\n","%cd mish-cuda\n","!python setup.py build install\n","%cd ..\n","\n","# Install PyTorch Wavelets\n","!git clone https://github.com/fbcotter/pytorch_wavelets\n","%cd pytorch_wavelets\n","!pip install .\n","%cd ..\n","\n","%cd /content/drive/MyDrive/yolor"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TYI5O1mW98Ji"},"source":["## **2. YOLOR Weight 및 데이터 다운로드**"]},{"cell_type":"code","metadata":{"id":"HOqdKhc4-vOK"},"source":["!rm -rf dataset\n","!wget -O dataset.zip https://www.dropbox.com/s/oo1g18jlgm3qzza/dataset_train.zip?dl=1\n","!unzip dataset.zip -d dataset\n","!rm -rf dataset.zip"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"eltS69vHDldw"},"source":["# YOLOR-P6, W6, E6, D6\n","!wget -O yolor_p6.pt https://www.dropbox.com/s/ldyk3dzuuu3y9xx/yolor_p6.pt?dl=1\n","#!wget -O yolor_w6.pt https://www.dropbox.com/s/cqrxp1tlfk7sb51/yolor_w6.pt?dl=1\n","#!wget -O yolor_d6.pt https://www.dropbox.com/s/znl5pfwcyr8ylcb/yolor-d6.pt?dl=1\n","#!wget -O yolor_e6.py https://www.dropbox.com/s/ql8e89jwi6wewbc/yolor-e6.pt?dl=1"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GCs0G_xoD0aq"},"source":["## **3. Write YOLOR Configuration**\n","\n","- YAML 파일 경로 설정\n","  - train: /content/drive/MyDrive/yolor/dataset/coin_dice_ball/train/images\n","  - val: /content/drive/MyDrive/yolor/dataset/coin_dice_ball/valid/images\n","\n","- **파일 이름에 \".\"이 포함된 경우 해결 방법**\n","https://issuemode.com/issues/WongKinYiu/yolor/3414331\n","\n","Fixed by changing 372 line:\n","yolor/utils/datasets.py\n","\n","```python\n","return [x.replace(sa, sb, 1).replace(x.split('.')[-1], 'txt') for x in img_paths]\n","```\n","\n","To:\n","\n","```python\n","return [x.replace('images', 'labels').replace(os.path.splitext(x)[-1], '.txt') for x in img_paths]\n","```\n","\n","- **output_to_target 업데이트**\n","\n","Fixed by changing this line:\n","yolor/utils/plots.py\n","\n","```python\n","def output_to_target(output, width, height):\n","    if isinstance(output, torch.Tensor):\n","        output = output.cpu().numpy()\n","\n","    targets = []\n","    for i, o in enumerate(output):\n","        if o is not None:\n","            if isinstance(o, torch.Tensor):\n","                o = o.cpu().numpy()\n","            for pred in o:\n","                box = pred[:4]\n","```"]},{"cell_type":"code","metadata":{"id":"cy8NlkoKg9lC"},"source":["import yaml\n","with open('/content/drive/MyDrive/yolor/dataset/coin_dice_ball/data.yaml') as f:\n","    dataMap = yaml.safe_load(f)\n","\n","num_classes = len(dataMap['names'])\n","num_filters = (num_classes + 5) * 3\n","from IPython.core.magic import register_line_cell_magic\n","\n","@register_line_cell_magic\n","def writetemplate(line, cell):\n","    with open(line, 'w') as f:\n","        f.write(cell.format(**globals()))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"p2XOWgwAg5kV"},"source":["#@title YOLOR Architecture - Double click on this line in the code cell. { display-mode: \"form\" }\n","%%writetemplate /content/drive/MyDrive/yolor/yolor/cfg/yolor_p6.cfg\n","\n","[net]\n","batch=64\n","subdivisions=8\n","width=1280\n","height=1280\n","channels=3\n","momentum=0.949\n","decay=0.0005\n","angle=0\n","saturation = 1.5\n","exposure = 1.5\n","hue=.1\n","\n","learning_rate=0.00261\n","burn_in=1000\n","max_batches = 500500\n","policy=steps\n","steps=400000,450000\n","scales=.1,.1\n","\n","mosaic=1\n","\n","\n","# ============ Backbone ============ #\n","\n","# Stem \n","\n","# P1\n","\n","# Downsample\n","\n","# 0\n","[reorg]\n","\n","[convolutional]\n","batch_normalize=1\n","filters=64\n","size=3\n","stride=1\n","pad=1\n","activation=silu\n","\n","\n","# P2\n","\n","# Downsample\n","\n","[convolutional]\n","batch_normalize=1\n","filters=128\n","size=3\n","stride=2\n","pad=1\n","activation=silu\n","\n","# Split\n","\n","[convolutional]\n","batch_normalize=1\n","filters=64\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[route]\n","layers = -2\n","\n","[convolutional]\n","batch_normalize=1\n","filters=64\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","# Residual Block\n","\n","[convolutional]\n","batch_normalize=1\n","filters=64\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=64\n","size=3\n","stride=1\n","pad=1\n","activation=silu\n","\n","[shortcut]\n","from=-3\n","activation=linear\n","\n","[convolutional]\n","batch_normalize=1\n","filters=64\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=64\n","size=3\n","stride=1\n","pad=1\n","activation=silu\n","\n","[shortcut]\n","from=-3\n","activation=linear\n","\n","[convolutional]\n","batch_normalize=1\n","filters=64\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=64\n","size=3\n","stride=1\n","pad=1\n","activation=silu\n","\n","[shortcut]\n","from=-3\n","activation=linear\n","\n","# Transition first\n","#\n","#[convolutional]\n","#batch_normalize=1\n","#filters=64\n","#size=1\n","#stride=1\n","#pad=1\n","#activation=silu\n","\n","# Merge [-1, -(3k+3)]\n","\n","[route]\n","layers = -1,-12\n","\n","# Transition last\n","\n","# 16 (previous+6+3k)\n","[convolutional]\n","batch_normalize=1\n","filters=128\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","\n","# P3\n","\n","# Downsample\n","\n","[convolutional]\n","batch_normalize=1\n","filters=256\n","size=3\n","stride=2\n","pad=1\n","activation=silu\n","\n","# Split\n","\n","[convolutional]\n","batch_normalize=1\n","filters=128\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[route]\n","layers = -2\n","\n","[convolutional]\n","batch_normalize=1\n","filters=128\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","# Residual Block\n","\n","[convolutional]\n","batch_normalize=1\n","filters=128\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=128\n","size=3\n","stride=1\n","pad=1\n","activation=silu\n","\n","[shortcut]\n","from=-3\n","activation=linear\n","\n","[convolutional]\n","batch_normalize=1\n","filters=128\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=128\n","size=3\n","stride=1\n","pad=1\n","activation=silu\n","\n","[shortcut]\n","from=-3\n","activation=linear\n","\n","[convolutional]\n","batch_normalize=1\n","filters=128\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=128\n","size=3\n","stride=1\n","pad=1\n","activation=silu\n","\n","[shortcut]\n","from=-3\n","activation=linear\n","\n","[convolutional]\n","batch_normalize=1\n","filters=128\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=128\n","size=3\n","stride=1\n","pad=1\n","activation=silu\n","\n","[shortcut]\n","from=-3\n","activation=linear\n","\n","[convolutional]\n","batch_normalize=1\n","filters=128\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=128\n","size=3\n","stride=1\n","pad=1\n","activation=silu\n","\n","[shortcut]\n","from=-3\n","activation=linear\n","\n","[convolutional]\n","batch_normalize=1\n","filters=128\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=128\n","size=3\n","stride=1\n","pad=1\n","activation=silu\n","\n","[shortcut]\n","from=-3\n","activation=linear\n","\n","[convolutional]\n","batch_normalize=1\n","filters=128\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=128\n","size=3\n","stride=1\n","pad=1\n","activation=silu\n","\n","[shortcut]\n","from=-3\n","activation=linear\n","\n","# Transition first\n","#\n","#[convolutional]\n","#batch_normalize=1\n","#filters=128\n","#size=1\n","#stride=1\n","#pad=1\n","#activation=silu\n","\n","# Merge [-1, -(3k+3)]\n","\n","[route]\n","layers = -1,-24\n","\n","# Transition last\n","\n","# 43 (previous+6+3k)\n","[convolutional]\n","batch_normalize=1\n","filters=256\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","\n","# P4\n","\n","# Downsample\n","\n","[convolutional]\n","batch_normalize=1\n","filters=384\n","size=3\n","stride=2\n","pad=1\n","activation=silu\n","\n","# Split\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[route]\n","layers = -2\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","# Residual Block\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=3\n","stride=1\n","pad=1\n","activation=silu\n","\n","[shortcut]\n","from=-3\n","activation=linear\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=3\n","stride=1\n","pad=1\n","activation=silu\n","\n","[shortcut]\n","from=-3\n","activation=linear\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=3\n","stride=1\n","pad=1\n","activation=silu\n","\n","[shortcut]\n","from=-3\n","activation=linear\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=3\n","stride=1\n","pad=1\n","activation=silu\n","\n","[shortcut]\n","from=-3\n","activation=linear\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=3\n","stride=1\n","pad=1\n","activation=silu\n","\n","[shortcut]\n","from=-3\n","activation=linear\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=3\n","stride=1\n","pad=1\n","activation=silu\n","\n","[shortcut]\n","from=-3\n","activation=linear\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=3\n","stride=1\n","pad=1\n","activation=silu\n","\n","[shortcut]\n","from=-3\n","activation=linear\n","\n","# Transition first\n","#\n","#[convolutional]\n","#batch_normalize=1\n","#filters=192\n","#size=1\n","#stride=1\n","#pad=1\n","#activation=silu\n","\n","# Merge [-1, -(3k+3)]\n","\n","[route]\n","layers = -1,-24\n","\n","# Transition last\n","\n","# 70 (previous+6+3k)\n","[convolutional]\n","batch_normalize=1\n","filters=384\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","\n","# P5\n","\n","# Downsample\n","\n","[convolutional]\n","batch_normalize=1\n","filters=512\n","size=3\n","stride=2\n","pad=1\n","activation=silu\n","\n","# Split\n","\n","[convolutional]\n","batch_normalize=1\n","filters=256\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[route]\n","layers = -2\n","\n","[convolutional]\n","batch_normalize=1\n","filters=256\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","# Residual Block\n","\n","[convolutional]\n","batch_normalize=1\n","filters=256\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=256\n","size=3\n","stride=1\n","pad=1\n","activation=silu\n","\n","[shortcut]\n","from=-3\n","activation=linear\n","\n","[convolutional]\n","batch_normalize=1\n","filters=256\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=256\n","size=3\n","stride=1\n","pad=1\n","activation=silu\n","\n","[shortcut]\n","from=-3\n","activation=linear\n","\n","[convolutional]\n","batch_normalize=1\n","filters=256\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=256\n","size=3\n","stride=1\n","pad=1\n","activation=silu\n","\n","[shortcut]\n","from=-3\n","activation=linear\n","\n","# Transition first\n","#\n","#[convolutional]\n","#batch_normalize=1\n","#filters=256\n","#size=1\n","#stride=1\n","#pad=1\n","#activation=silu\n","\n","# Merge [-1, -(3k+3)]\n","\n","[route]\n","layers = -1,-12\n","\n","# Transition last\n","\n","# 85 (previous+6+3k)\n","[convolutional]\n","batch_normalize=1\n","filters=512\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","\n","# P6\n","\n","# Downsample\n","\n","[convolutional]\n","batch_normalize=1\n","filters=640\n","size=3\n","stride=2\n","pad=1\n","activation=silu\n","\n","# Split\n","\n","[convolutional]\n","batch_normalize=1\n","filters=320\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[route]\n","layers = -2\n","\n","[convolutional]\n","batch_normalize=1\n","filters=320\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","# Residual Block\n","\n","[convolutional]\n","batch_normalize=1\n","filters=320\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=320\n","size=3\n","stride=1\n","pad=1\n","activation=silu\n","\n","[shortcut]\n","from=-3\n","activation=linear\n","\n","[convolutional]\n","batch_normalize=1\n","filters=320\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=320\n","size=3\n","stride=1\n","pad=1\n","activation=silu\n","\n","[shortcut]\n","from=-3\n","activation=linear\n","\n","[convolutional]\n","batch_normalize=1\n","filters=320\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=320\n","size=3\n","stride=1\n","pad=1\n","activation=silu\n","\n","[shortcut]\n","from=-3\n","activation=linear\n","\n","# Transition first\n","#\n","#[convolutional]\n","#batch_normalize=1\n","#filters=320\n","#size=1\n","#stride=1\n","#pad=1\n","#activation=silu\n","\n","# Merge [-1, -(3k+3)]\n","\n","[route]\n","layers = -1,-12\n","\n","# Transition last\n","\n","# 100 (previous+6+3k)\n","[convolutional]\n","batch_normalize=1\n","filters=640\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","# ============ End of Backbone ============ #\n","\n","# ============ Neck ============ #\n","\n","# CSPSPP\n","\n","[convolutional]\n","batch_normalize=1\n","filters=320\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[route]\n","layers = -2\n","\n","[convolutional]\n","batch_normalize=1\n","filters=320\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","size=3\n","stride=1\n","pad=1\n","filters=320\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=320\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","### SPP ###\n","[maxpool]\n","stride=1\n","size=5\n","\n","[route]\n","layers=-2\n","\n","[maxpool]\n","stride=1\n","size=9\n","\n","[route]\n","layers=-4\n","\n","[maxpool]\n","stride=1\n","size=13\n","\n","[route]\n","layers=-1,-3,-5,-6\n","### End SPP ###\n","\n","[convolutional]\n","batch_normalize=1\n","filters=320\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","size=3\n","stride=1\n","pad=1\n","filters=320\n","activation=silu\n","\n","[route]\n","layers = -1, -13\n","\n","# 115 (previous+6+5+2k)\n","[convolutional]\n","batch_normalize=1\n","filters=320\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","# End of CSPSPP\n","\n","\n","# FPN-5\n","\n","[convolutional]\n","batch_normalize=1\n","filters=256\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[upsample]\n","stride=2\n","\n","[route]\n","layers = 85\n","\n","[convolutional]\n","batch_normalize=1\n","filters=256\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[route]\n","layers = -1, -3\n","\n","[convolutional]\n","batch_normalize=1\n","filters=256\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","# Split\n","\n","[convolutional]\n","batch_normalize=1\n","filters=256\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[route]\n","layers = -2\n","\n","# Plain Block\n","\n","[convolutional]\n","batch_normalize=1\n","filters=256\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","size=3\n","stride=1\n","pad=1\n","filters=256\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=256\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","size=3\n","stride=1\n","pad=1\n","filters=256\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=256\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","size=3\n","stride=1\n","pad=1\n","filters=256\n","activation=silu\n","\n","# Merge [-1, -(2k+2)]\n","\n","[route]\n","layers = -1, -8\n","\n","# Transition last\n","\n","# 131 (previous+6+4+2k)\n","[convolutional]\n","batch_normalize=1\n","filters=256\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","\n","# FPN-4\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[upsample]\n","stride=2\n","\n","[route]\n","layers = 70\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[route]\n","layers = -1, -3\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","# Split\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[route]\n","layers = -2\n","\n","# Plain Block\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","size=3\n","stride=1\n","pad=1\n","filters=192\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","size=3\n","stride=1\n","pad=1\n","filters=192\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","size=3\n","stride=1\n","pad=1\n","filters=192\n","activation=silu\n","\n","# Merge [-1, -(2k+2)]\n","\n","[route]\n","layers = -1, -8\n","\n","# Transition last\n","\n","# 147 (previous+6+4+2k)\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","\n","# FPN-3\n","\n","[convolutional]\n","batch_normalize=1\n","filters=128\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[upsample]\n","stride=2\n","\n","[route]\n","layers = 43\n","\n","[convolutional]\n","batch_normalize=1\n","filters=128\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[route]\n","layers = -1, -3\n","\n","[convolutional]\n","batch_normalize=1\n","filters=128\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","# Split\n","\n","[convolutional]\n","batch_normalize=1\n","filters=128\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[route]\n","layers = -2\n","\n","# Plain Block\n","\n","[convolutional]\n","batch_normalize=1\n","filters=128\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","size=3\n","stride=1\n","pad=1\n","filters=128\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=128\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","size=3\n","stride=1\n","pad=1\n","filters=128\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=128\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","size=3\n","stride=1\n","pad=1\n","filters=128\n","activation=silu\n","\n","# Merge [-1, -(2k+2)]\n","\n","[route]\n","layers = -1, -8\n","\n","# Transition last\n","\n","# 163 (previous+6+4+2k)\n","[convolutional]\n","batch_normalize=1\n","filters=128\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","\n","# PAN-4\n","\n","[convolutional]\n","batch_normalize=1\n","size=3\n","stride=2\n","pad=1\n","filters=192\n","activation=silu\n","\n","[route]\n","layers = -1, 147\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","# Split\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[route]\n","layers = -2\n","\n","# Plain Block\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","size=3\n","stride=1\n","pad=1\n","filters=192\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","size=3\n","stride=1\n","pad=1\n","filters=192\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","size=3\n","stride=1\n","pad=1\n","filters=192\n","activation=silu\n","\n","[route]\n","layers = -1,-8\n","\n","# Transition last\n","\n","# 176 (previous+3+4+2k)\n","[convolutional]\n","batch_normalize=1\n","filters=192\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","\n","# PAN-5\n","\n","[convolutional]\n","batch_normalize=1\n","size=3\n","stride=2\n","pad=1\n","filters=256\n","activation=silu\n","\n","[route]\n","layers = -1, 131\n","\n","[convolutional]\n","batch_normalize=1\n","filters=256\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","# Split\n","\n","[convolutional]\n","batch_normalize=1\n","filters=256\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[route]\n","layers = -2\n","\n","# Plain Block\n","\n","[convolutional]\n","batch_normalize=1\n","filters=256\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","size=3\n","stride=1\n","pad=1\n","filters=256\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=256\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","size=3\n","stride=1\n","pad=1\n","filters=256\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=256\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","size=3\n","stride=1\n","pad=1\n","filters=256\n","activation=silu\n","\n","[route]\n","layers = -1,-8\n","\n","# Transition last\n","\n","# 189 (previous+3+4+2k)\n","[convolutional]\n","batch_normalize=1\n","filters=256\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","\n","# PAN-6\n","\n","[convolutional]\n","batch_normalize=1\n","size=3\n","stride=2\n","pad=1\n","filters=320\n","activation=silu\n","\n","[route]\n","layers = -1, 115\n","\n","[convolutional]\n","batch_normalize=1\n","filters=320\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","# Split\n","\n","[convolutional]\n","batch_normalize=1\n","filters=320\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[route]\n","layers = -2\n","\n","# Plain Block\n","\n","[convolutional]\n","batch_normalize=1\n","filters=320\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","size=3\n","stride=1\n","pad=1\n","filters=320\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=320\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","size=3\n","stride=1\n","pad=1\n","filters=320\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","filters=320\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","[convolutional]\n","batch_normalize=1\n","size=3\n","stride=1\n","pad=1\n","filters=320\n","activation=silu\n","\n","[route]\n","layers = -1,-8\n","\n","# Transition last\n","\n","# 202 (previous+3+4+2k)\n","[convolutional]\n","batch_normalize=1\n","filters=320\n","size=1\n","stride=1\n","pad=1\n","activation=silu\n","\n","# ============ End of Neck ============ #\n","\n","# 203\n","[implicit_add]\n","filters=256\n","\n","# 204\n","[implicit_add]\n","filters=384\n","\n","# 205\n","[implicit_add]\n","filters=512\n","\n","# 206\n","[implicit_add]\n","filters=640\n","\n","# 207\n","[implicit_mul]\n","filters={num_filters}\n","\n","# 208\n","[implicit_mul]\n","filters={num_filters}\n","\n","# 209\n","[implicit_mul]\n","filters={num_filters}\n","\n","# 210\n","[implicit_mul]\n","filters={num_filters}\n","\n","# ============ Head ============ #\n","\n","# YOLO-3\n","\n","[route]\n","layers = 163\n","\n","[convolutional]\n","batch_normalize=1\n","size=3\n","stride=1\n","pad=1\n","filters=256\n","activation=silu\n","\n","[shift_channels]\n","from=203\n","\n","[convolutional]\n","size=1\n","stride=1\n","pad=1\n","filters={num_filters}\n","activation=linear\n","\n","[control_channels]\n","from=207\n","\n","[yolo]\n","mask = 0,1,2\n","anchors = 19,27,  44,40,  38,94,  96,68,  86,152,  180,137,  140,301,  303,264,  238,542,  436,615,  739,380,  925,792\n","classes={num_classes}\n","num=12\n","jitter=.3\n","ignore_thresh = .7\n","truth_thresh = 1\n","random=1\n","scale_x_y = 1.05\n","iou_thresh=0.213\n","cls_normalizer=1.0\n","iou_normalizer=0.07\n","iou_loss=ciou\n","nms_kind=greedynms\n","beta_nms=0.6\n","\n","\n","# YOLO-4\n","\n","[route]\n","layers = 176\n","\n","[convolutional]\n","batch_normalize=1\n","size=3\n","stride=1\n","pad=1\n","filters=384\n","activation=silu\n","\n","[shift_channels]\n","from=204\n","\n","[convolutional]\n","size=1\n","stride=1\n","pad=1\n","filters={num_filters}\n","activation=linear\n","\n","[control_channels]\n","from=208\n","\n","[yolo]\n","mask = 3,4,5\n","anchors = 19,27,  44,40,  38,94,  96,68,  86,152,  180,137,  140,301,  303,264,  238,542,  436,615,  739,380,  925,792\n","classes={num_classes}\n","num=12\n","jitter=.3\n","ignore_thresh = .7\n","truth_thresh = 1\n","random=1\n","scale_x_y = 1.05\n","iou_thresh=0.213\n","cls_normalizer=1.0\n","iou_normalizer=0.07\n","iou_loss=ciou\n","nms_kind=greedynms\n","beta_nms=0.6\n","\n","\n","# YOLO-5\n","\n","[route]\n","layers = 189\n","\n","[convolutional]\n","batch_normalize=1\n","size=3\n","stride=1\n","pad=1\n","filters=512\n","activation=silu\n","\n","[shift_channels]\n","from=205\n","\n","[convolutional]\n","size=1\n","stride=1\n","pad=1\n","filters={num_filters}\n","activation=linear\n","\n","[control_channels]\n","from=209\n","\n","[yolo]\n","mask = 6,7,8\n","anchors = 19,27,  44,40,  38,94,  96,68,  86,152,  180,137,  140,301,  303,264,  238,542,  436,615,  739,380,  925,792\n","classes={num_classes}\n","num=12\n","jitter=.3\n","ignore_thresh = .7\n","truth_thresh = 1\n","random=1\n","scale_x_y = 1.05\n","iou_thresh=0.213\n","cls_normalizer=1.0\n","iou_normalizer=0.07\n","iou_loss=ciou\n","nms_kind=greedynms\n","beta_nms=0.6\n","\n","\n","# YOLO-6\n","\n","[route]\n","layers = 202\n","\n","[convolutional]\n","batch_normalize=1\n","size=3\n","stride=1\n","pad=1\n","filters=640\n","activation=silu\n","\n","[shift_channels]\n","from=206\n","\n","[convolutional]\n","size=1\n","stride=1\n","pad=1\n","filters={num_filters}\n","activation=linear\n","\n","[control_channels]\n","from=210\n","\n","[yolo]\n","mask = 9,10,11\n","anchors = 19,27,  44,40,  38,94,  96,68,  86,152,  180,137,  140,301,  303,264,  238,542,  436,615,  739,380,  925,792\n","classes={num_classes}\n","num=12\n","jitter=.3\n","ignore_thresh = .7\n","truth_thresh = 1\n","random=1\n","scale_x_y = 1.05\n","iou_thresh=0.213\n","cls_normalizer=1.0\n","iou_normalizer=0.07\n","iou_loss=ciou\n","nms_kind=greedynms\n","beta_nms=0.6\n","\n","# ============ End of Head ============ #"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZLldIGy2ERgB"},"source":["%cat /content/drive/MyDrive/yolor/yolor/cfg/yolor_p6.cfg"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OqG-CDJZEiw2"},"source":["!rm -rf runs\n","!python yolor/train.py \\\n","                --batch-size 8 \\\n","                --img 448 448 \\\n","                --data 'dataset/coin_dice_ball/data.yaml' \\\n","                --cfg /content/drive/MyDrive/yolor/yolor/cfg/yolor_p6.cfg \\\n","                --weights 'yolor_p6.pt' \\\n","                --device 0 \\\n","                --name yolor_dice \\\n","                --hyp 'yolor/data/hyp.scratch.1280.yaml' \\\n","                --epochs 50"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FAbe94smXcg0"},"source":["## **4. YOLOR 학습 성능 평가**"]},{"cell_type":"code","metadata":{"id":"-Kha-ehkX1qP"},"source":["# Start tensorboard\n","# Launch after you have started training\n","# logs save in the folder \"runs\"\n","%load_ext tensorboard\n","%tensorboard --logdir runs"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MGnkowATX4ZS"},"source":["from IPython.display import Image\n","from yolor import utils\n","Image(filename='runs/train/yolor_dice/results.png', width=1000)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Jyp7zrtBX6wc"},"source":["# Plot ground truth data\n","Image(filename='runs/train/yolor_dice/test_batch0_labels.jpg', width=1000)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"kDDz3cWgq4gQ"},"source":["# Plot predicted data\n","Image(filename='runs/train/yolor_dice/test_batch0_pred.jpg', width=1000)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mqYf31oCYYRn"},"source":["## **5. Trained Weights를 활용한 추론**\n","- `test/images` 데이터 활용\n","- 작업폴더로 Trained Weight 복사 "]},{"cell_type":"code","metadata":{"id":"QwuHFc3nYf7J"},"source":["# Build class names file\n","import yaml\n","import ast\n","with open(\"dataset/coin_dice_ball/data.yaml\", 'r') as stream:\n","    names = str(yaml.safe_load(stream)['names'])\n","\n","namesFile = open(\"data_dice.names\", \"w+\")\n","names = ast.literal_eval(names)\n","for name in names:\n","  namesFile.write(name +'\\n')\n","namesFile.close()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"liYDNniHYiKq"},"source":["%cp runs/train/yolor_dice/weights/best_overall.pt yolor_dice.pt "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fwuNw8kmtzpY"},"source":["## **5.1. Trained Weights를 활용한 사진 추론**"]},{"cell_type":"code","metadata":{"id":"CLG0HPpbtpK0"},"source":["# Display inferenced \n","in_path = \"dataset/coin_dice_ball/test/images/\"\n","out_path = \"dataset/coin_dice_ball/test/images/outputs/\"\n","\n","# Infer figures with the YOLOR trained network\n","!python yolor/detect.py \\\n","                --source $in_path \\\n","                --output $out_path \\\n","                --conf 0.25 \\\n","                --weights yolor_dice.pt \\\n","                --cfg /content/drive/MyDrive/yolor/yolor/cfg/yolor_p6.cfg \\\n","                --names data_dice.names"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"SfObNHTCYqih"},"source":["# Display inferenced images\n","import glob\n","from IPython.display import Image, display\n","\n","for imageName in glob.glob('dataset/coin_dice_ball/test/images/outputs/*.jpg'):\n","    display(Image(filename=imageName))\n","    print(\"\\n\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_XUnMCThYM3W"},"source":["## **5.2. Trained Weights를 활용한 비디오 추론**"]},{"cell_type":"code","metadata":{"id":"ONVUkU0yIGBt"},"source":["# Display inferenced \n","in_path = \"dataset/coin_dice_ball/videos/\"\n","out_path = \"dataset/coin_dice_ball/videos/outputs/\"\n","\n","# Infer figures with the YOLOR trained network\n","!python yolor/detect.py \\\n","                --source $in_path \\\n","                --output $out_path \\\n","                --conf 0.5 \\\n","                --weights yolor_dice.pt \\\n","                --cfg /content/drive/MyDrive/yolor/yolor/cfg/yolor_p6.cfg \\\n","                --names data_dice.names"],"execution_count":null,"outputs":[]}]}